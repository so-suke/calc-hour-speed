{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","timeStart","setTimeStart","timeEnd","setTimeEnd","rotateNumber","setRotateNumber","rotateNumberPerHour","setRotateNumberPerHour","elapsedMinutes","setElapsedMinutes","className","htmlFor","type","value","onChange","event","target","changeTimeStart","changeTimeEnd","changeRotateNumber","onClick","dateStart","parse","Date","dateEnd","elapsedMinutesResult","differenceInMinutes","rotateNumberPerMinuteResult","Number","rotateNumberPerHourResult","Math","floor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAkFeA,MA3Ef,WAAgB,IAAD,EACqBC,mBAAS,QAD9B,mBACNC,EADM,KACKC,EADL,OAEiBF,mBAAS,QAF1B,mBAENG,EAFM,KAEGC,EAFH,OAG2BJ,mBAAS,IAHpC,mBAGNK,EAHM,KAGQC,EAHR,OAIyCN,mBAAS,GAJlD,mBAINO,EAJM,KAIeC,EAJf,OAK+BR,mBAAS,GALxC,mBAKNS,EALM,KAKUC,EALV,KAkCb,OACE,sBAAKC,UAAU,MAAf,UACE,uBAAOC,QAAQ,GAAf,sCACA,uBACED,UAAU,QACVE,KAAK,OACLC,MAAOb,EACPc,SAAU,SAACC,IAlCO,SAACA,GACvBd,EAAac,EAAMC,OAAOH,OAkCpBI,CAAgBF,MAGpB,uBAAOJ,QAAQ,GAAf,sCACA,uBACED,UAAU,QACVE,KAAK,OACLC,MAAOX,EACPY,SAAU,SAACC,IAxCK,SAACA,GACrBZ,EAAWY,EAAMC,OAAOH,OAwClBK,CAAcH,MAGlB,uBAAOJ,QAAQ,GAAf,gCACA,uBACED,UAAU,QACVE,KAAK,OACLC,MAAOT,EACPU,SAAU,SAACC,IA9CU,SAACA,GAC1BV,EAAgBU,EAAMC,OAAOH,OA8CvBM,CAAmBJ,MAGvB,wBAAQL,UAAU,UAAUU,QA7CA,WAE9B,IAAMC,EAAYC,YAAMtB,EAAW,OAAQ,IAAIuB,MACzCC,EAAUF,YAAMpB,EAAS,OAAQ,IAAIqB,MAGrCE,EAA+BC,YAAoBF,EAASH,GAClEZ,EAAkBgB,GAGlB,IAAME,EAA8BC,OAAOxB,GAAgBqB,EAErDI,EAA4BC,KAAKC,MAhC9B,GAgCoCJ,GAC7CpB,EAAuBsB,IAgCrB,0BAIA,sBAAKnB,UAAU,UAAf,UACE,yDAAQF,EAAR,YACA,6CAAMF,EAAN,yBC9DO0B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fe3c0d89.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport { parse, differenceInMinutes } from \"date-fns\";\n\nconst HOUR = 60;\n\nfunction App() {\n  const [timeStart, setTimeStart] = useState(\"1435\");\n  const [timeEnd, setTimeEnd] = useState(\"1650\");\n  const [rotateNumber, setRotateNumber] = useState(\"\");\n  const [rotateNumberPerHour, setRotateNumberPerHour] = useState(0);\n  const [elapsedMinutes, setElapsedMinutes] = useState(0);\n\n  const changeTimeStart = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setTimeStart(event.target.value);\n  };\n  const changeTimeEnd = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setTimeEnd(event.target.value);\n  };\n  const changeRotateNumber = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setRotateNumber(event.target.value);\n  };\n\n  // 計算ボタン押下\n  const calcRotateNumberPerHour = () => {\n    // 時間の文字列を日付オブジェクトに変換する。\n    const dateStart = parse(timeStart, \"HHmm\", new Date());\n    const dateEnd = parse(timeEnd, \"HHmm\", new Date());\n\n    // 日付オブジェクトから差の分数（経過分数）を求める。\n    const elapsedMinutesResult: number = differenceInMinutes(dateEnd, dateStart);\n    setElapsedMinutes(elapsedMinutesResult);\n\n    // (回転数 / 経過分数)で1分辺りの回転数を計算する。\n    const rotateNumberPerMinuteResult = Number(rotateNumber) / elapsedMinutesResult;\n    // 時速の回転数を求める、小数点なしにしたい。四捨五入する。\n    const rotateNumberPerHourResult = Math.floor(rotateNumberPerMinuteResult * HOUR);\n    setRotateNumberPerHour(rotateNumberPerHourResult);\n  };\n\n  return (\n    <div className=\"App\">\n      <label htmlFor=\"\">開始時刻</label>\n      <input\n        className=\"input\"\n        type=\"text\"\n        value={timeStart}\n        onChange={(event) => {\n          changeTimeStart(event);\n        }}\n      />\n      <label htmlFor=\"\">終了時刻</label>\n      <input\n        className=\"input\"\n        type=\"text\"\n        value={timeEnd}\n        onChange={(event) => {\n          changeTimeEnd(event);\n        }}\n      />\n      <label htmlFor=\"\">回転数</label>\n      <input\n        className=\"input\"\n        type=\"text\"\n        value={rotateNumber}\n        onChange={(event) => {\n          changeRotateNumber(event);\n        }}\n      />\n      <button className=\"calcBtn\" onClick={calcRotateNumberPerHour}>\n        計算\n      </button>\n\n      <div className=\"display\">\n        <p>経過時間{elapsedMinutes}分</p>\n        <p>時速{rotateNumberPerHour}回転</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}