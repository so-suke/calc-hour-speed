{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","timeStart","setTimeStart","timeEnd","setTimeEnd","rotateNumberPerHour","setRotateNumberPerHour","elapsedSeconds","setElapsedSeconds","rotateNumberStart","setRotateNumberStart","rotateNumberEnd","setRotateNumberEnd","className","htmlFor","type","value","onChange","event","target","changeRotateNumberStart","onClick","date","format","Date","changeTimeStart","changeRotateNumberEnd","changeTimeEnd","timeFormat","dateStart","parse","dateEnd","elapsedSecondsResult","differenceInSeconds","rotateNumberPerSecondResult","Number","rotateNumberPerHourResult","Math","floor","toFixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQA4HeA,MApHf,WAAgB,IAAD,EACqBC,mBAAS,YAD9B,mBACNC,EADM,KACKC,EADL,OAEiBF,mBAAS,YAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGyCJ,mBAAS,GAHlD,mBAGNK,EAHM,KAGeC,EAHf,OAI+BN,mBAAS,GAJxC,mBAINO,EAJM,KAIUC,EAJV,OAKqCR,mBAAS,OAL9C,mBAKNS,EALM,KAKaC,EALb,OAMiCV,mBAAS,OAN1C,mBAMNW,EANM,KAMWC,EANX,KAoDb,OACE,sBAAKC,UAAU,MAAf,UACE,uBAAOC,QAAQ,GAAf,4CACA,uBACED,UAAU,QACVE,KAAK,OACLC,MAAOP,EACPQ,SAAU,SAACC,IA7Ce,SAACA,GAC/BR,EAAqBQ,EAAMC,OAAOH,OA6C5BI,CAAwBF,MAG5B,wBAAQL,UAAU,UAAUQ,QArBT,WAErB,IAAMC,EAAOC,YAAO,IAAIC,KAAQ,YAChCtB,EAAaoB,IAkBX,kDAGA,uBAAOR,QAAQ,GAAf,sCACA,uBACED,UAAU,QACVE,KAAK,OACLC,MAAOf,EACPgB,SAAU,SAACC,IA/DO,SAACA,GACvBhB,EAAagB,EAAMC,OAAOH,OA+DpBS,CAAgBP,MAGpB,uBAAOJ,QAAQ,GAAf,4CACA,uBACED,UAAU,QACVE,KAAK,OACLC,MAAOL,EACPM,SAAU,SAACC,IA/Da,SAACA,GAC7BN,EAAmBM,EAAMC,OAAOH,OA+D1BU,CAAsBR,MAG1B,wBAAQL,UAAU,UAAUQ,QArCf,WACf,IAAMC,EAAOC,YAAO,IAAIC,KAAQ,YAChCpB,EAAWkB,IAmCT,kDAGA,uBAAOR,QAAQ,GAAf,sCACA,uBACED,UAAU,QACVE,KAAK,OACLC,MAAOb,EACPc,SAAU,SAACC,IAjFK,SAACA,GACrBd,EAAWc,EAAMC,OAAOH,OAiFlBW,CAAcT,MAIlB,wBAAQL,UAAU,UAAUQ,QA3EA,WAC9B,IAAMO,EAAa,WAEbC,EAAYC,YAAM7B,EAAW2B,EAAY,IAAIJ,MAC7CO,EAAUD,YAAM3B,EAASyB,EAAY,IAAIJ,MAGzCQ,EAA+BC,YAAoBF,EAASF,GAClErB,EAAkBwB,GAIlB,IACME,GADeC,OAAOxB,GAAmBwB,OAAO1B,IACHuB,EAE7CI,EAA4BC,KAAKC,MAxC5B,GAwCkCJ,EAvCpC,IAwCT5B,EAAuB8B,IA2DrB,0BAIA,sBAAKvB,UAAU,UAAf,UACE,4DACA,sBAAMA,UAAU,SAAhB,UAA2BN,EA1GpB,IA0G6CgC,QAAQ,KAC5D,0CACA,sDACA,sBAAM1B,UAAU,SAAhB,SAA0BsB,OAAOxB,GAAmBwB,OAAO1B,KAC3D,gDACA,gDACA,sBAAMI,UAAU,SAAhB,SAA0BR,IAC1B,uDCxGOmC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cabbf258.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport { parse, differenceInSeconds, format } from \"date-fns\";\n\nconst MINUTE = 60;\nconst HOUR = 60;\n\nfunction App() {\n  const [timeStart, setTimeStart] = useState(\"14:30:00\");\n  const [timeEnd, setTimeEnd] = useState(\"14:45:00\");\n  const [rotateNumberPerHour, setRotateNumberPerHour] = useState(0);\n  const [elapsedSeconds, setElapsedSeconds] = useState(0);\n  const [rotateNumberStart, setRotateNumberStart] = useState(\"100\");\n  const [rotateNumberEnd, setRotateNumberEnd] = useState(\"200\");\n\n  const changeTimeStart = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setTimeStart(event.target.value);\n  };\n  const changeTimeEnd = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setTimeEnd(event.target.value);\n  };\n  const changeRotateNumberStart = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setRotateNumberStart(event.target.value);\n  };\n  const changeRotateNumberEnd = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setRotateNumberEnd(event.target.value);\n  };\n\n  // 計算ボタン押下\n  const calcRotateNumberPerHour = () => {\n    const timeFormat = \"HH:mm:ss\";\n    // 時間の文字列を日付オブジェクトに変換する。\n    const dateStart = parse(timeStart, timeFormat, new Date());\n    const dateEnd = parse(timeEnd, timeFormat, new Date());\n\n    // 差の秒を求める\n    const elapsedSecondsResult: number = differenceInSeconds(dateEnd, dateStart);\n    setElapsedSeconds(elapsedSecondsResult);\n    // 秒辺り回転数を求める\n\n    // (回転数 / 経過分数)で1秒辺りの回転数を計算する。\n    const rotateNumber = Number(rotateNumberEnd) - Number(rotateNumberStart);\n    const rotateNumberPerSecondResult = rotateNumber / elapsedSecondsResult;\n    // 時速の回転数を求める、小数点なしにしたい。四捨五入する。\n    const rotateNumberPerHourResult = Math.floor(rotateNumberPerSecondResult * MINUTE * HOUR);\n    setRotateNumberPerHour(rotateNumberPerHourResult);\n  };\n\n  // 開始時刻を自動入力する。\n  const inputStartTime = () => {\n    // 現在時刻を時間分秒の形にして、テキストボックスに書き込む\n    const date = format(new Date(), \"HH:mm:ss\");\n    setTimeStart(date);\n  };\n  const inputEnd = () => {\n    const date = format(new Date(), \"HH:mm:ss\");\n    setTimeEnd(date);\n  };\n\n  return (\n    <div className=\"App\">\n      <label htmlFor=\"\">開始回転数</label>\n      <input\n        className=\"input\"\n        type=\"text\"\n        value={rotateNumberStart}\n        onChange={(event) => {\n          changeRotateNumberStart(event);\n        }}\n      />\n      <button className=\"calcBtn\" onClick={inputStartTime}>\n        開始時刻入力\n      </button>\n      <label htmlFor=\"\">開始時刻</label>\n      <input\n        className=\"input\"\n        type=\"text\"\n        value={timeStart}\n        onChange={(event) => {\n          changeTimeStart(event);\n        }}\n      />\n      <label htmlFor=\"\">終了回転数</label>\n      <input\n        className=\"input\"\n        type=\"text\"\n        value={rotateNumberEnd}\n        onChange={(event) => {\n          changeRotateNumberEnd(event);\n        }}\n      />\n      <button className=\"calcBtn\" onClick={inputEnd}>\n        終了時刻入力\n      </button>\n      <label htmlFor=\"\">終了時刻</label>\n      <input\n        className=\"input\"\n        type=\"text\"\n        value={timeEnd}\n        onChange={(event) => {\n          changeTimeEnd(event);\n        }}\n      />\n\n      <button className=\"calcBtn\" onClick={calcRotateNumberPerHour}>\n        計算\n      </button>\n\n      <div className=\"display\">\n        <span>経過時間</span>\n        <span className=\"number\">{(elapsedSeconds / MINUTE).toFixed(1)}</span>\n        <span>分</span>\n        <span>回転数</span>\n        <span className=\"number\">{Number(rotateNumberEnd) - Number(rotateNumberStart)}</span>\n        <span>回転</span>\n        <span>時速</span>\n        <span className=\"number\">{rotateNumberPerHour}</span>\n        <span>回転</span>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}