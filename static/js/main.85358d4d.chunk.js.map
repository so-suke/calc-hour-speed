{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["TIME_FORMAT","App","useState","rotateNumberStart","setRotateNumberStart","rotateNumberEnd","setRotateNumberEnd","timeStart","setTimeStart","timeEnd","setTimeEnd","rotateNumberPerHour","setRotateNumberPerHour","elapsedSeconds","setElapsedSeconds","useEffect","rotateNumberStartLocal","localStorage","getItem","rotateNumberEndLocal","timeStartLocal","timeEndLocal","setItem","className","htmlFor","type","value","onChange","event","target","changeRotateNumberStart","changeTimeStart","onClick","date","format","Date","changeRotateNumberEnd","changeTimeEnd","dateStart","parse","dateEnd","elapsedSecondsResult","differenceInSeconds","rotateNumberPerSecondResult","Number","rotateNumberPerHourResult","Math","floor","toFixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85358d4d.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nimport { parse, differenceInSeconds, format } from \"date-fns\";\n\nconst MINUTE = 60;\nconst HOUR = 60;\nconst TIME_FORMAT = \"HH:mm:ss\";\n\nfunction App() {\n  const [rotateNumberStart, setRotateNumberStart] = useState(\"\");\n  const [rotateNumberEnd, setRotateNumberEnd] = useState(\"\");\n  const [timeStart, setTimeStart] = useState(\"\");\n  const [timeEnd, setTimeEnd] = useState(\"\");\n  const [rotateNumberPerHour, setRotateNumberPerHour] = useState(0);\n  const [elapsedSeconds, setElapsedSeconds] = useState(0);\n\n  useEffect(() => {\n    const rotateNumberStartLocal = localStorage.getItem(\"rotateNumberStart\") || \"\";\n    const rotateNumberEndLocal = localStorage.getItem(\"rotateNumberEnd\") || \"\";\n    const timeStartLocal = localStorage.getItem(\"timeStart\") || \"\";\n    const timeEndLocal = localStorage.getItem(\"timeEnd\") || \"\";\n\n    setRotateNumberStart(rotateNumberStartLocal);\n    setRotateNumberEnd(rotateNumberEndLocal);\n    setTimeStart(timeStartLocal);\n    setTimeEnd(timeEndLocal);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"rotateNumberStart\", rotateNumberStart);\n  }, [rotateNumberStart]);\n  useEffect(() => {\n    localStorage.setItem(\"rotateNumberEnd\", rotateNumberEnd);\n  }, [rotateNumberEnd]);\n  useEffect(() => {\n    localStorage.setItem(\"timeStart\", timeStart);\n  }, [timeStart]);\n  useEffect(() => {\n    localStorage.setItem(\"timeEnd\", timeEnd);\n  }, [timeEnd]);\n\n  const changeTimeStart = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setTimeStart(event.target.value);\n  };\n  const changeTimeEnd = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setTimeEnd(event.target.value);\n  };\n  const changeRotateNumberStart = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setRotateNumberStart(event.target.value);\n  };\n  const changeRotateNumberEnd = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    setRotateNumberEnd(event.target.value);\n  };\n\n  // 計算ボタン押下\n  const calcRotateNumberPerHour = () => {\n    // 時間の文字列を日付オブジェクトに変換する。\n    const dateStart = parse(timeStart, TIME_FORMAT, new Date());\n    const dateEnd = parse(timeEnd, TIME_FORMAT, new Date());\n\n    // 差の秒を求める\n    const elapsedSecondsResult: number = differenceInSeconds(dateEnd, dateStart);\n    setElapsedSeconds(elapsedSecondsResult);\n\n    // 1秒辺りの回転数を計算する。\n    const rotateNumber = Number(rotateNumberEnd) - Number(rotateNumberStart);\n    const rotateNumberPerSecondResult = rotateNumber / elapsedSecondsResult;\n    // 時速の回転数を求める。\n    const rotateNumberPerHourResult = Math.floor(rotateNumberPerSecondResult * MINUTE * HOUR);\n    setRotateNumberPerHour(rotateNumberPerHourResult);\n  };\n\n  // 時刻を自動入力する。\n  const inputStartTime = () => {\n    // 現在時刻を時間分秒の形にして、テキストボックスに書き込む\n    const date = format(new Date(), TIME_FORMAT);\n    setTimeStart(date);\n  };\n  const inputEnd = () => {\n    const date = format(new Date(), TIME_FORMAT);\n    setTimeEnd(date);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"formContent\">\n        <label htmlFor=\"\">開始回転数</label>\n        <input\n          className=\"input\"\n          type=\"number\"\n          value={rotateNumberStart}\n          onChange={(event) => {\n            changeRotateNumberStart(event);\n          }}\n        />\n        <label htmlFor=\"\">開始時刻</label>\n        <input\n          className=\"input\"\n          type=\"text\"\n          value={timeStart}\n          onChange={(event) => {\n            changeTimeStart(event);\n          }}\n        />\n\n        <button className=\"calcBtn\" onClick={inputStartTime}>\n          開始時刻入力\n        </button>\n      </div>\n\n      <div className=\"formContent\">\n        <label htmlFor=\"\">終了回転数</label>\n        <input\n          className=\"input\"\n          type=\"number\"\n          value={rotateNumberEnd}\n          onChange={(event) => {\n            changeRotateNumberEnd(event);\n          }}\n        />\n\n        <label htmlFor=\"\">終了時刻</label>\n        <input\n          className=\"input\"\n          type=\"text\"\n          value={timeEnd}\n          onChange={(event) => {\n            changeTimeEnd(event);\n          }}\n        />\n        <button className=\"calcBtn\" onClick={inputEnd}>\n          終了時刻入力\n        </button>\n      </div>\n      \n      <button className=\"calcBtn\" onClick={calcRotateNumberPerHour}>\n        計算\n      </button>\n\n      <div className=\"display\">\n        <Fragment>\n          <span>経過時間</span>\n          <span className=\"number\">{(elapsedSeconds / MINUTE).toFixed(1)}</span>\n          <span>分</span>\n        </Fragment>\n        <Fragment>\n          <span>回転数</span>\n          <span className=\"number\">{Number(rotateNumberEnd) - Number(rotateNumberStart)}</span>\n          <span>回転</span>\n        </Fragment>\n        <Fragment>\n          <span>時速</span>\n          <span className=\"number\">{rotateNumberPerHour}</span>\n          <span>回転</span>\n        </Fragment>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}